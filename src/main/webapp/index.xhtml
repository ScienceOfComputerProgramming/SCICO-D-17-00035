<ui:composition xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                xmlns="http://www.w3.org/1999/xhtml"
                template="/theme/theme.xhtml">

    <ui:define name="nav">
        <ul class="nav navbar-nav">
            <li class="active">
                <h:link value="Home" outcome="index"/>
            </li>
            <li>
                <h:link value="Examples" outcome="example"/>
            </li>
            <li>
                <h:link value="Config" outcome="config"/>
            </li>
            <li><a href="http://zen-tools.com" target="_blank">About Us</a></li>
        </ul>
    </ui:define>

    <ui:define name="styles">
        <style>
            .CodeMirror {
                border: 1px solid #eee;
                height: 150px;
            }

        </style>

        <h:outputStylesheet library="codemirror" name="codemirror.css"/>
        <h:outputStylesheet library="codemirror" name="colors.css"/>
        <h:outputStylesheet library="codemirror" name="show-hint.css"/>

        <h:outputScript library="codemirror" name="codemirror.js"/>
        <h:outputScript library="codemirror" name="ocl.js"/>
        <h:outputScript library="codemirror" name="matchbrackets.js"/>
        <h:outputScript library="codemirror" name="ocl-hint.js"/>
        <h:outputScript library="codemirror" name="show-hint.js"/>
        <h:outputScript library="codemirror" name="hardwrap.js"/>


    </ui:define>

    <ui:define name="body">


        <div class="loader"/>
        <f:event type="preRenderView" listener="#{bean.preRenderView()}"/>
        <div class="container-fluid">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">IOCL</h3>
                </div>
                <div class="panel-body">
                    <div class="row">

                        <div class="col-lg-9">

                            <ui:include src="/panels/modelInputPanel.xhtml"/>

                            <ui:include src="/panels/body/queryPanel.xhtml"/>

                        </div>
                        <div class="col-lg-3">

                            <ui:include src="/panels/ModelExplorer/modelExplorer.xhtml"/>

                            <ui:include src="/panels/panelSwitch.xhtml"/>

                            <ui:include src="/panels/statics.xhtml"/>
                        </div>
                    </div>
                </div>
            </div>


        </div>


        <script type="application/javascript">
            if (document.getElementById("informationTextArea") != null) {
                editor = CodeMirror.fromTextArea(document.getElementById("informationTextArea"), {
                    extraKeys: {"Ctrl-Space": "autocomplete"},
                    lineNumbers: true,
                    matchBrackets: true,
                    mode: "text/x-ocl"

                });

                var wait, options = {column: 100}, changing = false;

                editor.on("change", function (cm, change) {

                    editor.save();
                    var textArea = cm.getTextArea();
                    textArea.value = cm.getValue();
                    textArea.onchange();

                    if (changing) return;
                    clearTimeout(wait);
                    wait = setTimeout(function () {
                        changing = true;
                        cm.wrapParagraphsInRange(change.from, CodeMirror.changeEnd(change), options);
                        changing = false;
                    }, 200);

                });

                /* var charWidth = editor.defaultCharWidth(), basePadding = 0;
                 editor.on("renderLine", function(cm, line, elt) {
                 var off = CodeMirror.countColumn(line.text, null, cm.getOption("tabSize")) * charWidth;
                 elt.style.textIndent = "-" + off + "px";
                 elt.style.paddingLeft = (basePadding + off) + "px";
                 });
                 editor.refresh();*/
            }

        </script>

        <h:outputScript>
            function ajaxStart(source) {


            if (source == null || source.id != "informationTextArea") {
            $("body").addClass("loading");
            }


            }

            function ajaxComplete(source) {

            if (source == null || source.id != "informationTextArea") {

            if (document.getElementById("informationTextArea") != null) {
            editor = CodeMirror.fromTextArea(document.getElementById("informationTextArea"), {
            extraKeys: {"Ctrl-Space": "autocomplete"},
            lineNumbers: true,
            matchBrackets: true,
            mode: "text/x-ocl"

            });

            var wait, options = {column: 100}, changing = false;

            editor.on("change", function (cm, change) {

            editor.save();
            var textArea = cm.getTextArea();
            textArea.value = cm.getValue();
            textArea.onchange();

            if (changing) return;
            clearTimeout(wait);
            wait = setTimeout(function () {
            changing = true;
            cm.wrapParagraphsInRange(change.from, CodeMirror.changeEnd(change), options);
            changing = false;
            }, 200);

            });
            }


            $("body").removeClass("loading");
            }


            }

            jsf.ajax.addOnEvent(function (data) {
                var ajaxstatus = data.status;

            var source = data.source;
                switch (ajaxstatus) {
                    case "begin":
            ajaxStart(source);
                        break;

                    case "complete":
            ajaxComplete(source);
                        break;

                    case "success":

                        break;
                }
            });
        </h:outputScript>
        <p:ajaxStatus onstart=" ajaxStart(null)" oncomplete="ajaxComplete()"/>

    </ui:define>
</ui:composition>